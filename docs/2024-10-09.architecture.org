The intention is to build a benchmarking suite that supports the following *datasets*, *loads*, and *architectures*.

A rough approximation of the steps we need to complete:
- store different datasets
- manufacture the default query load
- write the API to send query load to different databases with different architectures, indices, etc.
- implement each architecture independently.
  + scoping hnsw-lib, implementing bindings.
  + faiss.
- write up a plan to run each experiment.

** Initial Benchmarks
*** Datasets 
- Deep1B, ~360Gb. 
  + 1M
  + 10M
  + 100M
  + 1B

*** Loads (queries over time)
- 10k queries sync.

*** Architectures
- SSD, standalone. ~qdrant feature to store on SSD?~
- DRAM, random partitioning. ~qdrant automatic sharding?~
  + 2 nodes
  + 5 nodes
  + 10 nodes
- DRAM, balanced partitioning. ~qdrant custom sharding API?~
  + 2 nodes
  + 5 nodes
  + 10 nodes

*** Indices
- HNSW
- LSH
